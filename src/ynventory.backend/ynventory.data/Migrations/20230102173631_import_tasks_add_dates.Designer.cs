// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ynventory.Data;

#nullable disable

namespace Ynventory.Data.Migrations
{
    [DbContext(typeof(YnventoryDbContext))]
    [Migration("20230102173631_import_tasks_add_dates")]
    partial class importtasksadddates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ynventory.Data.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Finish")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCommander")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.Property<int>("ParentItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("ParentItemId");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CardMetadataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardMetadataId");

                    b.ToTable("CardColor", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardColorIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CardMetadataId")
                        .HasColumnType("uuid");

                    b.Property<string>("ColorIdentity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardMetadataId");

                    b.ToTable("CardColorIdentity", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardKeyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CardMetadataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardMetadataId");

                    b.ToTable("CardKeyword", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardLegality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CardMetadataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Legality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CardMetadataId");

                    b.ToTable("CardLegality", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrlLarge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrlSmall")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lang")
                        .HasColumnType("text");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<string>("ManaCost")
                        .HasColumnType("text");

                    b.Property<int?>("ManaCostTotal")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OracleText")
                        .HasColumnType("text");

                    b.Property<int?>("Power")
                        .HasColumnType("integer");

                    b.Property<int?>("Toughness")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CardMetadata", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Collections", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.CollectionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionItems", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Decks", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.DeckCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("MetadataId");

                    b.ToTable("DeckCards", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.ImportError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrorData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImportTaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImportTaskId");

                    b.ToTable("ImportErrors", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.ImportTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("CollectionItemId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskState")
                        .HasColumnType("integer");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("finishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("CollectionItemId");

                    b.ToTable("ImportTasks", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ynventory.Data.Models.Card", b =>
                {
                    b.HasOne("Ynventory.Data.Models.CardMetadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ynventory.Data.Models.CollectionItem", "ParentItem")
                        .WithMany("Cards")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardColor", b =>
                {
                    b.HasOne("Ynventory.Data.Models.CardMetadata", "Metadata")
                        .WithMany("Colors")
                        .HasForeignKey("CardMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardColorIdentity", b =>
                {
                    b.HasOne("Ynventory.Data.Models.CardMetadata", "Metadata")
                        .WithMany("ColorIdentity")
                        .HasForeignKey("CardMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardKeyword", b =>
                {
                    b.HasOne("Ynventory.Data.Models.CardMetadata", "Metadata")
                        .WithMany("Keywords")
                        .HasForeignKey("CardMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardLegality", b =>
                {
                    b.HasOne("Ynventory.Data.Models.CardMetadata", "Metadata")
                        .WithMany("Legalities")
                        .HasForeignKey("CardMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Ynventory.Data.Models.CollectionItem", b =>
                {
                    b.HasOne("Ynventory.Data.Models.Collection", "Collection")
                        .WithMany("Items")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Ynventory.Data.Models.DeckCard", b =>
                {
                    b.HasOne("Ynventory.Data.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ynventory.Data.Models.CardMetadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Ynventory.Data.Models.ImportError", b =>
                {
                    b.HasOne("Ynventory.Data.Models.ImportTask", "ImportTask")
                        .WithMany("ImportErrors")
                        .HasForeignKey("ImportTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportTask");
                });

            modelBuilder.Entity("Ynventory.Data.Models.ImportTask", b =>
                {
                    b.HasOne("Ynventory.Data.Models.Collection", "Collection")
                        .WithMany("ImportTasks")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ynventory.Data.Models.CollectionItem", "CollectionItem")
                        .WithMany("ImportTasks")
                        .HasForeignKey("CollectionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("CollectionItem");
                });

            modelBuilder.Entity("Ynventory.Data.Models.CardMetadata", b =>
                {
                    b.Navigation("ColorIdentity");

                    b.Navigation("Colors");

                    b.Navigation("Keywords");

                    b.Navigation("Legalities");
                });

            modelBuilder.Entity("Ynventory.Data.Models.Collection", b =>
                {
                    b.Navigation("ImportTasks");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ynventory.Data.Models.CollectionItem", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("ImportTasks");
                });

            modelBuilder.Entity("Ynventory.Data.Models.ImportTask", b =>
                {
                    b.Navigation("ImportErrors");
                });
#pragma warning restore 612, 618
        }
    }
}
